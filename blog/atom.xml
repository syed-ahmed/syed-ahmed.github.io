<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://syed.sh/blog</id>
    <title>Syed Tousif Ahmed Blog</title>
    <updated>2020-06-02T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://syed.sh/blog"/>
    <subtitle>Syed Tousif Ahmed Blog</subtitle>
    <icon>https://syed.sh/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Creating Vivado Hardware Platform using YAML]]></title>
        <id>yaml-based-vivado-hardware-project</id>
        <link href="https://syed.sh/blog/yaml-based-vivado-hardware-project"/>
        <updated>2020-06-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The hardware design community have been following a design paradigm where you think of designing hardware spatially, i.e. start with a block diagram. I remember from my undergraduate logic design course, a block diagram was required before we started a lab assignment. It is the right approach for designing hardware. Vivado reinforces this paradigm by asking people to open the Vivado GUI, use the IP integrator and create a block design.]]></summary>
        <content type="html"><![CDATA[<p>The hardware design community have been following a design paradigm where you think of designing hardware spatially, i.e. start with a block diagram. I remember from my undergraduate logic design course, a block diagram was required before we started a lab assignment. It is the right approach for designing hardware. Vivado reinforces this paradigm by asking people to open the Vivado GUI, use the IP integrator and create a block design. </p><p>An alternative to the GUI are the Vivado TCL commands. <img loading="lazy" style="float:right;height:1000px" src="/assets/images/flow-6f408908c3c1a102114eea25d8242516.png" class="img_E7b_">TCL is the scripting language of the hardware design community. If you wanted to generate block designs based on some input parameters, you would be using TCL. If you are developing on a headless server, you would have no other choice than to use TCL.
TCL programming is not bad, however, I'm very used to Python as my scripting language of choice. If you wanted to generate a block design that was data driven (for instance, use the decisions made by a PyTorch ML model or a Google OR-Tools model), you would need to introduce Python into the picture because TCL doesn't have such packages.
If Python was a front-end for Vivado, our problem would have been solved! So how do we go from Python to TCL? People follow different approaches. You could write a Python script that generates a TCL file with the desired commands and parameters. You could use <a href="http://elmer.sourceforge.net/examples.html" target="_blank" rel="noopener noreferrer">elmer</a> to call Python from TCL (for instance, fork into a python class, get values from it and feed it to your TCL command), but elmer doesn't work for Python3. While writing this post, I came to know about Olof Kindgren's <a href="https://github.com/olofk/edalize" target="_blank" rel="noopener noreferrer">edalize</a> project! I'm taking a similar approach to this project, i.e. have a templated TCL script and use Python to feed those template parameters.
I generate a <code>yaml</code> configuration file from python and parse it in a TCL script. TCL has a yaml parser and can parse it to a TCL dictionary. You can then use the values from the dictionary in generic TCL functions. I discovered this <a href="https://github.com/Xilinx/wireless-apps/tree/master/scripts" target="_blank" rel="noopener noreferrer">repository</a> from Xilinx which uses a yaml configuration file in a TCL script to generate a vivado project. In addition, I found this excellent <a href="https://github.com/Xilinx/Vitis-AI/tree/master/DPU-TRD/prj/Vivado/scripts" target="_blank" rel="noopener noreferrer">Vivado hardware platform project</a> from Xilinx that uses TCL dicts to fully parameterize the generation of a block design. Combining these two, I have the approach on the right hand side.</p><p>Consider the following <code>yaml</code> file for one of our projects:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">dict_prj:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_sys:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bd_name: floorplan_static</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bd_ooc: Hierarchical</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prj_board: em.avnet.com:ultra96v2:part0:1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prj_name: floorplan_static</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prj_part: xczu3eg-sbva484-1-e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_stgy:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    synth:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      synth_1:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        STRATEGY: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        JOBS: 40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    impl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      impl_1_01:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PARENT: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        STRATEGY: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        JOBS: 40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      impl_1_03:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PARENT: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        STRATEGY: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        JOBS: 40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      impl_1_14:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PARENT: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        STRATEGY: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        JOBS: 40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      impl_1_15:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PARENT: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        STRATEGY: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        JOBS: 40</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_xdc:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      NAME: pblocks.xdc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      IS_TARGET: True</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_src:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      NAME: AxiLite2Bft_v2_0.v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      NAME: converter.v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_hier:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    h_bft:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PATH: bft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_ip:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ip_ps:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PATH: zynq_ultra_ps_e_0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      NAME: zynq_ultra_ps_e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      VLNV: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PROP:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PSU__CRL_APB__PL1_REF_CTRL__ACT_FREQMHZ: "19.660831"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PSU__FPGA_PL1_ENABLE: "1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PSU__CRL_APB__PL1_REF_CTRL__SRCSEL: RPLL</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PSU__PL_CLK1_BUF: "TRUE"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PSU__SAXIGP2__DATA_WIDTH: "32"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PSU__USE__S_AXI_GP2: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      BACFG:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        apply_board_preset: 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ip_clk_rst_usr:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PATH: rst_ps8_0_100M</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      NAME: proc_sys_reset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      VLNV: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PROP: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      BACFG: ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_pin:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    p_bft_S00_AXI:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      CLASS: INTF_PIN</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PATH: "bft/S00_AXI"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      MODE: Slave</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      VLNV: "xilinx.com:interface:aximm_rtl:1.0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_cn:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cn_overlay:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PIN intf PIN:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        zynq_ultra_ps_e_0/S_AXI_HP0_FPD: bft/M00_AXI</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        zynq_ultra_ps_e_0/M_AXI_HPM0_FPD: bft/S00_AXI</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        zynq_ultra_ps_e_0/M_AXI_HPM1_FPD: bft/S01_AXI</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      PIN from PIN:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bft/bft_0/dout_leaf_0: bft/AxiLite2Bft_v2_0_0/host_interface2bft</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bft/leaf_interface_0/din_leaf_user2interface: bft/axi_dma_0/m_axis_mm2s_tdata</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bft/leaf_interface_0/vld_user2interface: bft/axi_dma_0/m_axis_mm2s_tvalid</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bft/xlconcat_0/In0: bft/axi_dma_0/mm2s_introut</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        bft/xlconcat_0/In1: bft/axi_dma_1/s2mm_introut</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dict_addr:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    addr_s00_axi:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      REG: bft/AxiLite2Bft_v2_0_0/s00_axi/reg0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      RANGE: 0x00001000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      OFFSET: 0xA0002000</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>You can see that we have parameterized part and board numbers, since we want to support multiple boards with the same design. The PS IP is also parameterized since we want to support Zynq 7 series and Zynq UltraScale+. Similarly, you can see synthesis and implementation strategies are now parameterized, which means more design space exploration! Even connections of pins - we can now configure that with a python script if we want to generate a different overlay.</p><p>Following is how we are parsing the yaml in the TCL script:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">#****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># check if file exists</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proc lib_check_file { file_name } {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    set file_content ""</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if { [ file exists  $file_name ] } {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        set fp [open $file_name r]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        set file_content [read $fp]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        close $fp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lib_error YAML "Cannot open filename $file_name..."</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return $file_content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># load yaml file into dict</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">proc lib_yaml2dict { file_name } {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    set file_content [ lib_check_file $file_name ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return [yaml::yaml2dict $file_content]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># set global dict_prj</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#****************************************************************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set dict_prj  {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set config_file "config.yaml"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set cfg [lib_yaml2dict $config_file]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set dict_prj [dict get $cfg dict_prj]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>The rest of the script is then from <a href="https://github.com/Xilinx/Vitis-AI/tree/master/DPU-TRD/prj/Vivado/scripts" target="_blank" rel="noopener noreferrer">Xilinx's Vitis-AI repository</a>.
Now if you are wondering, why YAML? It's solely because of <a href="https://hydra.cc/" target="_blank" rel="noopener noreferrer">hydra</a>. Hydra's ability to compose a yaml file from a hierarchy of yaml files is a stunning feature that lets me focus on the parameters that matter in my project, and exactly fits our use case of supporting multiple moving things. For instance, Vivado is not backwards compatible and a set of parameters that worked in <code>2018.3</code> might not work in <code>2019.2</code>, for each board, Zynq7 and Zynq UltraScale+ PS parameters are different, and so on. Following is what my hydra conf looks like:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">├── conf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── architecture</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   ├── board</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       ├── pynq_z1.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       ├── ultra96v2.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       ├── zcu102.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       ├── zed.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│   ├── vivado</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       ├── 2018.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           ├── ultra96v2.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           ├── zcu102.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|       ├── 2019.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|           ├── zed.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   ├── config.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── generate_vivado_project.py</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>I can then execute the <code>generate_vivado_project.py</code> script with the command line parameters, such as <code>board=zed.yaml</code>, <code>vivado=2019.2</code> and it will generate a <code>config.yaml</code> which is the composition of the yaml files from the respective <code>conf</code> subdirectories. And now you can just source the tcl file with this config file! As a result, block design in vivado becomes a matter of writing a <code>yaml</code> file. </p><p>Now some cons of this approach - I have to find the names of the parameters, such as the Zynq IP parameters, AXI DMA parameters by trial-error in the GUI and then note it down in my configuration. This could be easily mitigated if all these parameters are nicely documented somewhere (or alternatively you could actually finish the design in GUI, export the TCL file and then note down the parameters from that TCL file...). Moreover, I like connecting the input and output of a block in the GUI than manually writing it in the <code>yaml</code> file. Hence, the way I see it, if you are prototyping and playing around with ideas, GUI approach is more flexible as I'm able to see the design like I would have done in my logic design lab assignments, whereas, when doing automation around generating hardware, templated TCL scripts with a configuration file is the way to go :).</p>]]></content>
        <author>
            <name>Syed Tousif Ahmed</name>
            <uri>https://syed.sh</uri>
        </author>
        <category label="vivado" term="vivado"/>
        <category label="fpga" term="fpga"/>
        <category label="tcl" term="tcl"/>
        <category label="yaml" term="yaml"/>
        <category label="hydra" term="hydra"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Use All Tunable Vivado Internal Params]]></title>
        <id>vivado-internal-params</id>
        <link href="https://syed.sh/blog/vivado-internal-params"/>
        <updated>2020-03-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[So I learned about this parameter that can be set in vivado, called place.debugShape, for my overlay generation work. It was referred in one of the tcl scripts in RapidWright with the command setparam place.debugShape $shapesFileName. Studying the tcl commands guide, I found out, you can list the description of this property using reportparam -nondefault, which suggests place.debugShape is an internal knob. A caveat of the reportparam command is that, it only lists these internal params when it is changed from its default value (you can know its default value by getparam). That is, reportparam -non_default won't show you all the internal knobs that are in vivado.]]></summary>
        <content type="html"><![CDATA[<p>So I learned about this parameter that can be set in vivado, called <code>place.debugShape</code>, for my overlay generation work. It was referred in one of the tcl scripts in RapidWright with the command <code>set_param place.debugShape $shapesFileName</code>. Studying the tcl commands guide, I found out, you can list the description of this property using <code>report_param -non_default</code>, which suggests <code>place.debugShape</code> is an internal knob. A caveat of the report_param command is that, it only lists these internal params when it is changed from its default value (you can know its default value by <code>get_param</code>). That is, <code>report_param -non_default</code> won't show you all the internal knobs that are in vivado. </p><p>Now that you have some context, it got me thinking are there other useful params which we should know about? Looks like somebody asked the same <a href="https://forums.xilinx.com/t5/Vivado-TCL-Community/lt-list-param-gt-not-listing-a-lot/td-p/998194" target="_blank" rel="noopener noreferrer">question</a> in Xilinx's forum, but received a reply from Xilinx saying those are internal and thou shall not use it.
When using the <code>place.debugShape</code> in my scripts, I saw some outputs:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">Shape builder is called from:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Stack:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/opt/Xilinx/Vivado/2018.3/lib/lnx64.o/librdi_place.so(HAPLPlacerShapeBuilder::buildShapes(HDPLNewShapeDB&amp;, HSTPtrHashSet&amp;, HDPLTask&amp;, HAPLPlaceApi*, HDPLControlSetDB const*,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/opt/Xilinx/Vivado/2018.3/lib/lnx64.o/librdi_implflow.so(HAPLFFastFlow3::place(HAPLFFastFlowParam const&amp;, HAPLFMigPblockInfo const*)+0x12cf) [0x7f51a8e7bb3f]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/opt/Xilinx/Vivado/2018.3/lib/lnx64.o/libtcl8.5.so(+0x334af) [0x7f51ccef74af]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>which looked like a familiar pattern - a frontend (tcl) binding to a C++ backend. So I was like, ok, may be if I grep the object dump of one of these <code>.so</code>, I could get the params? That didn't work. But what did work was, when I treated the <code>.so</code> in grep as a text file and searched for a "something-dot-camelCase" pattern, and voila, everything was in plain sight:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">place.debugCongestion</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">place.debugCrash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">place.debugFFGroup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">place.debugLightTimer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">place.debugMacroInterleavingOptimization</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">place.debugShape</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">place.debugShapeAppend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">place.debugWireLen</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>And many more such as:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.allowEmptyHierCellNets</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.allowEmptyHierCells</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.allowInverterPushing</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.annotateModifiedPrims</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.applyFinishingTouch</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.applyLogicProp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.applyPostPwroptCleanup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logicopt.applyRestruct</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>Similarly, there are tuneable params that look like <code>synth.*</code>, <code>route.*</code>, <code>power.*</code>, <code>timing.*</code>. in their respective <code>librdi_*.so</code>. That's all for this post. May be if you have a use-case, where you wanted vivado to do something, but it's not visible, one of these parameters might come into use! Of course I get Xilinx's point about these being internal knobs ;).</p><p>FYI following is the command with regex I used:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">grep -a -o -E '[a-zA-Z0-9]{3,}.[a-z]([a-z0-9][A-Z][A-Z0-9][a-z]|[A-Z0-9][a-z][a-z0-9][A-Z])[a-ZA-Z0-9]{3,}' /opt/Xilinx/Vivado/2018.3/lib/lnx64.o/librdi_place.so</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>You can find about 5000 of the params I scraped, in this repository: <a href="https://github.com/syed-ahmed/vivado-hacks" target="_blank" rel="noopener noreferrer">https://github.com/syed-ahmed/vivado-hacks</a></p>]]></content>
        <author>
            <name>Syed Tousif Ahmed</name>
            <uri>https://syed.sh</uri>
        </author>
        <category label="vivado" term="vivado"/>
        <category label="fpga" term="fpga"/>
        <category label="tcl" term="tcl"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software Development Workflow with Docker]]></title>
        <id>docker-workflow</id>
        <link href="https://syed.sh/blog/docker-workflow"/>
        <updated>2017-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[To best describe the motivation for writing this post let me describe the perspectives from two different people:]]></summary>
        <content type="html"><![CDATA[<p>To best describe the motivation for writing this post let me describe the perspectives from two different people:</p><p><strong>The Scientist's Perspective:</strong></p><p><em>I am a scientist working on my next deep learning algorithm that's gonna make everyone go like whaaa? Sometimes, I write my algorithm in TensorFlow, sometimes in Torch and sometimes in Caffe. I am also poorly funded and can't afford multiple machines for different setups. My problem is that, all these machine learning frameworks are not in sync and some uses different CUDA versions, drivers, modules etc. than the other. Although I can probably make them work in the same machine by being disciplined and having good practices on putting library paths and symlinks and stuff, I will probably screw things up when it comes to update my system/framework. Also, I don't wanna write installation instructions of all my packages when I release my code to the conference I'm submitting my paper to. I want the scientific community to reproduce my experiment exactly as I did it in my machine. Is there something that can streamline this process?</em></p><p><strong>The Software Developer's Perspective:</strong></p><p><em>I am a software developer who's sick and tired of installing stuff and just want to run this freaking code and get on with it. Is there something that can streamline this process?</em></p><p>The answer to their question is, yes. There is a thing called Docker which can streamline this process. Docker is kinda like a virtual machine but it doesn't include the OS, only the settings and minimal stuff that is required to reproduce your setup in another machine. For more on what it is, just read about it in this link: <a href="https://www.docker.com/what-docker" target="_blank" rel="noopener noreferrer">https://www.docker.com/what-docker</a>. Following is my migration process to docker:</p><p><img loading="lazy" src="/assets/images/previous-workflow-8e36dff65dfb071450eb51503b7d2ba8.png" width="921" height="555" class="img_E7b_">Above is my previous workflow. I have a computer with all the packages locally installed. I have a text editor where I write and edit my source code. And I have a terminal to compile and run the source code. The problem comes when I have conflicting packages for different kinds of source code I'm working on. For instance, in my work, some source codes are dependent on specific versions of CUDA. Our CS Java class at RIT one semester was in java version 1.7 and the next semester in java 1.8. Some people have moved to python 3 and some are still using python 2. Hence, in the above workflow, avoiding such conflicts is messy. Following is my current workflow:<img loading="lazy" src="/assets/images/current-workflow-3481f1dd1c9fe4543492aa01e0ae072d.png" width="1404" height="710" class="img_E7b_">In this workflow, I have a computer with only Docker Engine and universal drivers such as the display driver, installed. The only difference now is that I don't have all the packages such as python 2/python 3 locally installed, but installed in Docker Containers. I have different docker containers for different development projects. For instance, the Docker container for TensorFlow has python 2 by default, CUDA 8 and other TensorFlow specific packages installed, whereas the Docker container for Caffe has it's own specification. Hence, after I write my code in the text editor locally, I run that code in it's specific docker container.</p><p>Following is a step by step process of how I write code in TensorFlow. You can adopt the same process for whatever project you are working on:</p><p><strong>Step 1: Edit the code</strong></p><p>So for instance, here is a code for a model that I'm writing in Visual Studio Code. You might be writing some code for finding the solutions of some differential equations with Runge-Kutta solver in C. Write that code first in an editor. I am still not settled on a single editor. People use Vim, Emacs, Spacemacs, Visual Studio Code, Atom, Sublime, etc... the list goes on.<img loading="lazy" src="/assets/images/screenshot1-ae02339eb0b0cd68b8700294644a0f02.png" width="2560" height="1600" class="img_E7b_"></p><p><strong>Step 2: Get the Docker Container</strong></p><p>Assuming you have installed docker engine in your machine <!-- -->(<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/installation/</a>)<!-- -->, now you have to get a docker container. A docker container is an image. You can either build this image from the scratch <!-- -->(<!-- -->which I'll describe in a different post. You can even use multiple images and stack them up and make a single image to your requirements<!-- -->)<!-- --> or you can get this image from a repository <!-- -->(<a href="https://store.docker.com/search?q=&amp;source=verified&amp;type=image" target="_blank" rel="noopener noreferrer">https://store.docker.com/search?q=&amp;source=verified&amp;type=image</a>)<!-- -->. For now, I'll get the TensorFlow image with the following command in a terminal:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run -it gcr.io/tensorflow/tensorflow:latest-devel </span><span class="token function" style="color:#d73a49">bash</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>or <!-- -->(<!-- -->this command will just pull it, but not run it<!-- -->)</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> pull gcr.io/tensorflow/tensorflow:latest-devel</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>The command pulls the image from the repository and puts it locally in your machine and runs a bash shell in it as follows:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">Syeds-MBP:ptb luna$ </span><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run -it gcr.io/tensorflow/tensorflow:latest-devel </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Unable to </span><span class="token function" style="color:#d73a49">find</span><span class="token plain"> image </span><span class="token string" style="color:#e3116c">'gcr.io/tensorflow/tensorflow:latest-devel'</span><span class="token plain"> locally</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">latest-devel: Pulling from tensorflow/tensorflow</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">892cc5bfc051: Already exists </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">f3eda43ea55a: Already exists </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">646005d97ff4: Already exists </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">44d770c1f7bd: Already exists </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1ce0c4bfe746: Already exists </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">b98b28b649a2: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dbcb14adf008: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">18aa19fe8596: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7882fa001225: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cde898c339f7: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">05db1985de18: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">3ede8b995134: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">7e09e41c9d96: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">c3c542fce062: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2c4b672418c8: Pull complete </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Digest: sha256:2b3ab8cbcdd08fb93fc3b4e821ea366c2155a5af9441acfc03f927071b202a19</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Status: Downloaded newer image </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> gcr.io/tensorflow/tensorflow:latest-devel</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@2bef7283910f:~</span><span class="token comment" style="color:#999988;font-style:italic"># python</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>If you now open and type python or give some other commands, you can see what is installed in this container For instance, in the following, you can see the TensorFlow container start python 2 by default, has TensorFlow version 1.2.0, has bazel 0.4.5 installed, java 1.8 and g++ 5.4.0 compiler. <strong>And you had to copy-paste only one command to get all of those! </strong>That sure solved some of the installation problems our two subjects were having :<!-- -->)</p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">root@2bef7283910f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">~</span><span class="token comment" style="color:#999988;font-style:italic"># python</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Python </span><span class="token number" style="color:#36acaa">2.7</span><span class="token number" style="color:#36acaa">.12</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">default</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Nov </span><span class="token number" style="color:#36acaa">19</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2016</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">06</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">48</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">GCC </span><span class="token number" style="color:#36acaa">5.4</span><span class="token number" style="color:#36acaa">.0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20160609</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> on linux2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Type </span><span class="token string" style="color:#e3116c">"help"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"copyright"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"credits"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">or</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"license"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> more information</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> tensorflow </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> tf</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">__version__</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token string" style="color:#e3116c">'1.2.0'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> exit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@2bef7283910f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">~</span><span class="token comment" style="color:#999988;font-style:italic"># bazel version</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Build label</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0.4</span><span class="token number" style="color:#36acaa">.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Build target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bazel</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">out</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">local</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">fastbuild</span><span class="token operator" style="color:#393A34">/</span><span class="token builtin">bin</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">src</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">main</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">com</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">google</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">devtools</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">build</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">bazel</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">BazelServer_deploy</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Build time</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Thu Mar </span><span class="token number" style="color:#36acaa">16</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">19</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">38</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2017</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1489666778</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Build timestamp</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1489666778</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Build timestamp </span><span class="token keyword" style="color:#00009f">as</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1489666778</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@2bef7283910f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">~</span><span class="token comment" style="color:#999988;font-style:italic"># javac -version</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">javac </span><span class="token number" style="color:#36acaa">1.8</span><span class="token number" style="color:#36acaa">.0_131</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@2bef7283910f</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">~</span><span class="token comment" style="color:#999988;font-style:italic"># g++ -v</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Using built</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> specs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COLLECT_GCC</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">g</span><span class="token operator" style="color:#393A34">+</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COLLECT_LTO_WRAPPER</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">gcc</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linux</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gnu</span><span class="token operator" style="color:#393A34">/</span><span class="token number" style="color:#36acaa">5</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lto</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">wrapper</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linux</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gnu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Configured </span><span class="token keyword" style="color:#00009f">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">src</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">configure </span><span class="token operator" style="color:#393A34">-</span><span class="token plain">v </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">pkgversion</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'Ubuntu 5.4.0-6ubuntu1~16.04.4'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">bugurl</span><span class="token operator" style="color:#393A34">=</span><span class="token builtin">file</span><span class="token punctuation" style="color:#393A34">:</span><span class="token operator" style="color:#393A34">//</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">share</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">doc</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">gcc</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">5</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">README</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Bugs </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">languages</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">ada</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">+</span><span class="token operator" style="color:#393A34">+</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">java</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">go</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">fortran</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">objc</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">obj</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">c</span><span class="token operator" style="color:#393A34">+</span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">prefix</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">program</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">suffix</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">5</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">shared </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linker</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">build</span><span class="token operator" style="color:#393A34">-</span><span class="token builtin">id</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">libexecdir</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">without</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">included</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gettext </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">threads</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">posix </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">libdir</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">nls </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">sysroot</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">clocale</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">gnu </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">libstdcxx</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">debug </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">libstdcxx</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">time</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">yes </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">default</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">libstdcxx</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">abi</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">new </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gnu</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">unique</span><span class="token operator" style="color:#393A34">-</span><span class="token builtin">object</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">disable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">vtable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">verify </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">libmpx </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">plugin </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">system</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">zlib </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">disable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">browser</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">plugin </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">awt</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">gtk </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gtk</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">cairo </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">home</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">jvm</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1.5</span><span class="token number" style="color:#36acaa">.0</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcj</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">5</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">amd64</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">jre </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">home </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">jvm</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">root</span><span class="token operator" style="color:#393A34">-</span><span class="token builtin">dir</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">jvm</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1.5</span><span class="token number" style="color:#36acaa">.0</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcj</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">5</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">amd64 </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">jvm</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">jar</span><span class="token operator" style="color:#393A34">-</span><span class="token builtin">dir</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">lib</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">jvm</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">exports</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1.5</span><span class="token number" style="color:#36acaa">.0</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gcj</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">5</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">amd64 </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">arch</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">directory</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">amd64 </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ecj</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">jar</span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">usr</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">share</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">java</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">eclipse</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">ecj</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">jar </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">objc</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gc </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">multiarch </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">disable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">werror </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">arch</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">32</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">i686 </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">abi</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">m64 </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">multilib</span><span class="token operator" style="color:#393A34">-</span><span class="token builtin">list</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">m32</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">m64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">mx32 </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">multilib </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token keyword" style="color:#00009f">with</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">tune</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">generic </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">enable</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">checking</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">release </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">build</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linux</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gnu </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">host</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linux</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gnu </span><span class="token operator" style="color:#393A34">-</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">target</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">x86_64</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">linux</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">gnu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Thread model</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> posix</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gcc version </span><span class="token number" style="color:#36acaa">5.4</span><span class="token number" style="color:#36acaa">.0</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20160609</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Ubuntu </span><span class="token number" style="color:#36acaa">5.4</span><span class="token number" style="color:#36acaa">.0</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">6ubuntu1</span><span class="token operator" style="color:#393A34">~</span><span class="token number" style="color:#36acaa">16.04</span><span class="token number" style="color:#36acaa">.4</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>But now you might be saying, I don't see my code in here. How do I get my code in this container? So the answer lies in how we issued the docker run command. Since this is a container and is a closed system, we need to <strong>mount</strong> our local folder into this container. Similarly, if we want to do some networking stuff, we would have to open the port in the local machine to this container  with the docker run command. You can learn all the options that can be passed to docker run command in here: <a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/reference/run/</a>. For now type <strong>exit</strong> and go to step 3.</p><p><strong>Step 3: Running Docker</strong></p><p>To run a docker container, you need to identify which docker container to run. You can find out about available docker containers in your machine using the following command:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">Syeds-MBP:ptb luna$ </span><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> images</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">REPOSITORY                     TAG                 IMAGE ID            CREATED             SIZE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gcr.io/tensorflow/tensorflow   latest-devel        61c8843c7545        </span><span class="token number" style="color:#36acaa">9</span><span class="token plain"> days ago          </span><span class="token number" style="color:#36acaa">1.78</span><span class="token plain"> GB</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>You can see that our docker container has a repository name, tag, image ID. You can run this container as follows:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run -it gcr.io/tensorflow/tensorflow:latest-devel </span><span class="token function" style="color:#d73a49">bash</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>or with directly with the image id.</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run -it 61c8843c7545 </span><span class="token function" style="color:#d73a49">bash</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>But our run command is not complete yet. We need to expose port 6006. So let's do that by adding <code>-p HostPort:ContainerPort</code> argument as follows:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run -it -p </span><span class="token number" style="color:#36acaa">6006</span><span class="token plain">:6006 61c8843c7545 </span><span class="token function" style="color:#d73a49">bash</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>Now we need to mount our source code directory with a <code>-v SourceDirectory:ContainerDirectory</code> argument. Hence, our final run command is as follows:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">Syeds-MBP:ptb luna$ </span><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run -it -p </span><span class="token number" style="color:#36acaa">6006</span><span class="token plain">:6006 -v /Users/luna/workspace/models/:/root/workspace 61c8843c7545 </span><span class="token function" style="color:#d73a49">bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@89ce92fb9880:~</span><span class="token comment" style="color:#999988;font-style:italic"># ls</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">workspace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@89ce92fb9880:~</span><span class="token comment" style="color:#999988;font-style:italic"># cd workspace/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@89ce92fb9880:~/workspace</span><span class="token comment" style="color:#999988;font-style:italic"># ls</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">AUTHORS            WORKSPACE           cognitive_mapping_and_planning  inception                         neural_gpu             resnet         swivel       tutorials</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONTRIBUTING.md    adversarial_crypto  compression                     learning_to_remember_rare_events  neural_programmer      setup.py       syntaxnet    video_prediction</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ISSUE_TEMPLATE.md  adversarial_text    differential_privacy            lfads                             next_frame_prediction  skip_thoughts  tags</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">LICENSE            attention_ocr       domain_adaptation               lm_1b                             object_detection       slim           textsum</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">README.md          autoencoder         im2txt                          namignizer                        real_nvp               street         transformer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">root@89ce92fb9880:~/workspace</span><span class="token comment" style="color:#999988;font-style:italic">#</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>Now you can see that your local source folder is mounted in a folder inside the container. Since, the local folder is mounted, any change you make in the local folder is going to reflect inside the container and any change you make inside the container is going to reflect in the local folder. Just beware of changing permission and doing git push/pull inside the container as this might screw things up in your workflow. Just keep things clean and edit the source code locally, do git commit/pull/push locally and only run and compile code in this development workflow <!-- -->(<!-- -->the next post will talk about building docker images and how you can build on top of this image and add features to this image<!-- -->)<!-- -->.</p><p><strong>Step 4: Run the source code in the docker container</strong></p><p>Assuming you have edited the source code, let's run the code in the docker container as follows. I'm going to run the ptb word model as follows:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">root@89ce92fb9880:~/workspace/tutorials/rnn/ptb£ python ptb_word_lm.py --data_path</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">simple-examples/data/ --model</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">small --save_path</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">./  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2017</span><span class="token plain">-06-24 09:53:40.418532: W tensorflow/core/platform/cpu_feature_guard.cc:45</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> The TensorFlow library wasn</span><span class="token string" style="color:#e3116c">'t compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">2017-06-24 09:53:40.418576: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn'</span><span class="token plain">t compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2017</span><span class="token plain">-06-24 09:53:40.418586: W tensorflow/core/platform/cpu_feature_guard.cc:45</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> The TensorFlow library wasn</span><span class="token string" style="color:#e3116c">'t compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">2017-06-24 09:53:40.419125: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn'</span><span class="token plain">t compiled to use AVX2 instructions, but these are available on your machine and could speed up CPU computations.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2017</span><span class="token plain">-06-24 09:53:40.419173: W tensorflow/core/platform/cpu_feature_guard.cc:45</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> The TensorFlow library wasn't compiled to use FMA instructions, but these are available on your machine and could speed up CPU computations.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Epoch: </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> Learning rate: </span><span class="token number" style="color:#36acaa">1.000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0.004</span><span class="token plain"> perplexity: </span><span class="token number" style="color:#36acaa">7284.361</span><span class="token plain"> speed: </span><span class="token number" style="color:#36acaa">913</span><span class="token plain"> wps</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">0.104</span><span class="token plain"> perplexity: </span><span class="token number" style="color:#36acaa">856.644</span><span class="token plain"> speed: </span><span class="token number" style="color:#36acaa">1090</span><span class="token plain"> wps</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>Now let's make use of that exposed port using the following command and browsing to <a href="https://localhost:6006" target="_blank" rel="noopener noreferrer">https://localhost:6006</a> in our local browser:</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">root@89ce92fb9880:~/workspace/tutorials/rnn/ptb£ tensorboard --logdir</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">./</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Starting TensorBoard </span><span class="token number" style="color:#36acaa">54</span><span class="token plain"> at https://89ce92fb9880:6006</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Press CTRL+C to quit</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>As you can see, you got tensorboard opened up through port 6006:<br>
<img loading="lazy" src="/assets/images/screenshot2-8f8b6647293131ef79abbea791395639.png" width="1416" height="868" class="img_E7b_"></p><p><strong>Conclusion</strong></p><p>So that's it. Edit the code locally, build and run in the container, and save experiment results from the container to the host. I have specifically used a development workflow from deep learning, but you can adopt this workflow for any kind of development. For instance, if you are doing web development with React or Angular, you can pull a container which has the required dependency like node, babel etc. and write you source code locally and run it in the container. Same goes for scientists who are writing high performance computing code. You can create a container with all the required packages and do the same. In the next post, I'll talk about how you can build your custom container. For now, this is it.</p>]]></content>
        <author>
            <name>Syed Tousif Ahmed</name>
            <uri>https://syed.sh</uri>
        </author>
        <category label="docker" term="docker"/>
        <category label="software development" term="software development"/>
    </entry>
</feed>