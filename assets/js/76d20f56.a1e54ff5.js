"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2261],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return t?a.createElement(y,o(o({ref:n},c),{},{components:t})):a.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={},o="Discovering Invariants by Dynamic and Static Analysis",l={unversionedId:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants",id:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants",title:"Discovering Invariants by Dynamic and Static Analysis",description:"Program Invariants",source:"@site/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/4_discover_invariants.md",sourceDirName:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis",slug:"/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants",editUrl:"https://github.com/syed-ahmed/syed-ahmed.github.io/blob/main/website/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/4_discover_invariants.md?plain=1",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is Program Analysis?",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis"},next:{title:"Anatomy of a Static Analysis",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/static_analysis_anatomy"}},s={},p=[{value:"Program Invariants",id:"program-invariants",level:2},{value:"Discovering Invariants By Dynamic Analysis",id:"discovering-invariants-by-dynamic-analysis",level:2},{value:"Discovering Invariants By Static Analysis",id:"discovering-invariants-by-static-analysis",level:2}],c={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"discovering-invariants-by-dynamic-and-static-analysis"},"Discovering Invariants by Dynamic and Static Analysis"),(0,i.kt)("h2",{id:"program-invariants"},"Program Invariants"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Consider the following:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"int p(int x) { return x * x; }\n\nvoid main() {\n    int z;\n    if (getc() == 'a')\n        z = p(6) + 6;\n    else\n        z = p(-7) - 7;\n}\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"z="),"?")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Invariant is a program fact that is true in every run of the program.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"An invariant in the above program:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"z == c")," for constant ",(0,i.kt)("inlineCode",{parentName:"li"},"c")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"c = 42"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Need to reason about only two cases over all runs.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In true branch, ",(0,i.kt)("inlineCode",{parentName:"p"},"z = 6*6+6 = 42"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In false branch, ",(0,i.kt)("inlineCode",{parentName:"p"},"z = (-7*-7)-7 = 42"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Therefore ",(0,i.kt)("inlineCode",{parentName:"p"},"z = 42")," is an invariant at the program exit.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Now add the following at the end of the program:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"...\nif (z != 42)\n    disaster();\n...\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Above demonstrates, the program invariant can be used as a guard against a potentially unsafe function."))),(0,i.kt)("h2",{id:"discovering-invariants-by-dynamic-analysis"},"Discovering Invariants By Dynamic Analysis"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The above has two paths, but programs have arbitrary paths: loops, cases, recursion etc."),(0,i.kt)("li",{parentName:"ul"},"Dynamic analysis: ",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"runs the program ",(0,i.kt)("em",{parentName:"li"},"n")," times and discovers information."),(0,i.kt)("li",{parentName:"ul"},"discovering information over an arbitrary amount of paths is not feasible with dynamic analysis."),(0,i.kt)("li",{parentName:"ul"},"At best can detect likely invariants (",(0,i.kt)("inlineCode",{parentName:"li"},"Daikon"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Daikon")," can at best concluded ",(0,i.kt)("inlineCode",{parentName:"li"},"z = 42")," is a ",(0,i.kt)("em",{parentName:"li"},"likely")," invariant. Cannot prove ",(0,i.kt)("inlineCode",{parentName:"li"},"z == 42"),"."),(0,i.kt)("li",{parentName:"ul"},"Not entirely useless. ",(0,i.kt)("inlineCode",{parentName:"li"},"z")," ",(0,i.kt)("em",{parentName:"li"},"might")," be ",(0,i.kt)("inlineCode",{parentName:"li"},"42")," is a useful fact."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Daikon")," can rule out classes of invariant with a single run. It can concluded ",(0,i.kt)("inlineCode",{parentName:"li"},"z == c")," is not an invariant for any ",(0,i.kt)("inlineCode",{parentName:"li"},"c")," other than ",(0,i.kt)("inlineCode",{parentName:"li"},"42"),", i.e. ",(0,i.kt)("inlineCode",{parentName:"li"},"z==30")," is not an invariant."),(0,i.kt)("li",{parentName:"ul"},"To prove ",(0,i.kt)("inlineCode",{parentName:"li"},"z == 42"),", need static analysis.")))),(0,i.kt)("h2",{id:"discovering-invariants-by-static-analysis"},"Discovering Invariants By Static Analysis"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inspect the source code of the program."),(0,i.kt)("li",{parentName:"ul"},"Concludes ",(0,i.kt)("inlineCode",{parentName:"li"},"c = 42")," and this proves the invariant.")))}u.isMDXComponent=!0}}]);