"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9917],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,y=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return r?n.createElement(y,o(o({ref:t},u),{},{components:r})):n.createElement(y,o({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8521:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={},l="What is Program Analysis?",c={unversionedId:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",id:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",title:"What is Program Analysis?",description:"- Process of automatically discovering useful facts about program.",source:"@site/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/3_program_analysis.md",sourceDirName:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis",slug:"/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",editUrl:"https://github.com/syed-ahmed/syed-ahmed.github.io/blob/main/website/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/3_program_analysis.md?plain=1",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Course VM and Lab Instructions",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/course_vm_lab"},next:{title:"Discovering Invariants by Dynamic and Static Analysis",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants"}},u={},m=[{value:"Dynamic Program Analysis",id:"dynamic-program-analysis",level:2},{value:"Static Analysis",id:"static-analysis",level:2}],p={toc:m};function d(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"what-is-program-analysis"},"What is Program Analysis?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Process of ",(0,i.kt)("strong",{parentName:"li"},"automatically")," discovering useful facts about program."),(0,i.kt)("li",{parentName:"ul"},"Example useful fact: programming error, security vulnerabilities, overflow etc."),(0,i.kt)("li",{parentName:"ul"},"Analysis classified broadly into 3 kinds:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Dynamic: runtime analysis, runs the program, observes its behavior."),(0,i.kt)("li",{parentName:"ul"},"Static: compile-time analysis, inspects source/binary code."),(0,i.kt)("li",{parentName:"ul"},"Hybrid: combines both dynamic and static, use runtime and compile-time in interesting ways.")))),(0,i.kt)("h2",{id:"dynamic-program-analysis"},"Dynamic Program Analysis"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Monitors program runs and collects facts of the program."),(0,i.kt)("li",{parentName:"ul"},"Examples:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Purify"),": checks memory accesses, array bounds in C/C++."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Valgrind"),": detects memory leaks in x86 binaries. ",(0,i.kt)("strong",{parentName:"li"},"Memory leak")," is when program fails to ",(0,i.kt)("inlineCode",{parentName:"li"},"free")," allocated memories."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Eraser"),": detects data races in concurrent programs. ",(0,i.kt)("strong",{parentName:"li"},"Data race")," happens when two threads access the same memory location and at least one thread is doing a write. Data race indicates programming error as order of accesses can produce different results between runs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Daikon"),": finds likely invariants. ",(0,i.kt)("strong",{parentName:"li"},"Invariants")," are program facts that is true in every run of the program.")))),(0,i.kt)("h2",{id:"static-analysis"},"Static Analysis"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Inspects source/binary code and collects facts of the program"),(0,i.kt)("li",{parentName:"ul"},"Examples:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Lint"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"FindBugs"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Coverity"),": inspects C++/Java for suspicious error patterns."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Microsoft SLAM"),": checks C programs conforms to API usage rules. Windows developers use this to check whether device drivers use windows kernel API correctly."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Facebook Infer"),": detects memory leaks in Android apps."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ESC/Java"),": specifies and verifies invariants in java programs.")))))}d.isMDXComponent=!0}}]);