"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[242],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=l,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,a=new Array(i);a[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1966:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=n(7462),l=n(3366),i=(n(7294),n(3905)),a=["components"],o={sidebar_position:1},c="Installing LLVM",u={unversionedId:"llvm/install",id:"llvm/install",title:"Installing LLVM",description:"Host Machine",source:"@site/docs/llvm/install.md",sourceDirName:"llvm",slug:"/llvm/install",permalink:"/docs/llvm/install",editUrl:"https://github.com/syed-ahmed/syed-ahmed.github.io/blob/main/website/docs/llvm/install.md?plain=1",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"CUDA Graphs",permalink:"/docs/cuda/graphs"}},s={},p=[{value:"Host Machine",id:"host-machine",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Build",id:"build",level:2}],m={toc:p};function d(e){var t=e.components,n=(0,l.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"installing-llvm"},"Installing LLVM"),(0,i.kt)("h2",{id:"host-machine"},"Host Machine"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz"),(0,i.kt)("li",{parentName:"ul"},"40 GB RAM"),(0,i.kt)("li",{parentName:"ul"},"1 TB SSD")),(0,i.kt)("h2",{id:"dependencies"},"Dependencies"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"git 2.25.1"),(0,i.kt)("li",{parentName:"ul"},"cmake 3.16.3"),(0,i.kt)("li",{parentName:"ul"},"ninja 1.10.0"),(0,i.kt)("li",{parentName:"ul"},"clang++ 10.0.0"),(0,i.kt)("li",{parentName:"ul"},"python 3.8.10")),(0,i.kt)("h2",{id:"build"},"Build"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ninja instead of make."),(0,i.kt)("li",{parentName:"ul"},"Use lld or gold for the linker."),(0,i.kt)("li",{parentName:"ul"},"Build with ",(0,i.kt)("inlineCode",{parentName:"li"},"RelWithDebInfo")," to save on memory\nbut have some debug info."),(0,i.kt)("li",{parentName:"ul"},"Specify the target to save time on compilation."),(0,i.kt)("li",{parentName:"ul"},"Build shared library instead of static."),(0,i.kt)("li",{parentName:"ul"},"Build optimized tblgen to save compilation time."),(0,i.kt)("li",{parentName:"ul"},"Use clang++ to build using the new PassManager and\nsave on compile time."),(0,i.kt)("li",{parentName:"ul"},"Example commands:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'git clone --branch llvmorg-12.0.0 https://github.com/llvm/llvm-project\ncd llvm-project\nmkdir build\ncd build\nenv CC=`which clang` CXX=`which clang++` \\\ncmake -G Ninja \\\n      -DLLVM_ENABLE_PROJECTS=clang \\\n      -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n      -DLLVM_USE_LINKER=lld \\\n      -DLLVM_TARGETS_TO_BUILD="X86" \\\n      -DBUILD_SHARED_LIBS=ON \\\n      -DLLVM_OPTIMIZED_TABLEGEN=ON \\\n      ../llvm\nninja -j8\nninja check-all\n')))}d.isMDXComponent=!0}}]);