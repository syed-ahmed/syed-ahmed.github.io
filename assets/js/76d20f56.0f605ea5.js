"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2073],{7169:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=e(4848),a=e(8453);const r={},t="Discovering Invariants by Dynamic and Static Analysis",o={id:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants",title:"Discovering Invariants by Dynamic and Static Analysis",description:"Program Invariants",source:"@site/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/4_discover_invariants.md",sourceDirName:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis",slug:"/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants",draft:!1,unlisted:!1,editUrl:"https://github.com/syed-ahmed/syed-ahmed.github.io/blob/main/website/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/4_discover_invariants.md?plain=1",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"What is Program Analysis?",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis"},next:{title:"Anatomy of a Static Analysis",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/static_analysis_anatomy"}},c={},l=[{value:"Program Invariants",id:"program-invariants",level:2},{value:"Discovering Invariants By Dynamic Analysis",id:"discovering-invariants-by-dynamic-analysis",level:2},{value:"Discovering Invariants By Static Analysis",id:"discovering-invariants-by-static-analysis",level:2}];function d(n){const i={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h1,{id:"discovering-invariants-by-dynamic-and-static-analysis",children:"Discovering Invariants by Dynamic and Static Analysis"}),"\n",(0,s.jsx)(i.h2,{id:"program-invariants",children:"Program Invariants"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Consider the following:","\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-cpp",children:"int p(int x) { return x * x; }\n\nvoid main() {\n\tint z;\n\tif (getc() == 'a')\n\t\tz = p(6) + 6;\n\telse\n\t\tz = p(-7) - 7;\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"z="}),"?"]}),"\n",(0,s.jsx)(i.li,{children:"Invariant is a program fact that is true in every run of the program."}),"\n",(0,s.jsxs)(i.li,{children:["An invariant in the above program:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"z == c"})," for constant ",(0,s.jsx)(i.code,{children:"c"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"c = 42"})}),"\n",(0,s.jsx)(i.li,{children:"Need to reason about only two cases over all runs."}),"\n",(0,s.jsxs)(i.li,{children:["In true branch, ",(0,s.jsx)(i.code,{children:"z = 6*6+6 = 42"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:["In false branch, ",(0,s.jsx)(i.code,{children:"z = (-7*-7)-7 = 42"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:["Therefore ",(0,s.jsx)(i.code,{children:"z = 42"})," is an invariant at the program exit."]}),"\n",(0,s.jsxs)(i.li,{children:["Now add the following at the end of the program:","\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-cpp",children:"...\nif (z != 42)\n\tdisaster();\n...\n"})}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"Above demonstrates, the program invariant can be used as a guard against a potentially unsafe function."}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"discovering-invariants-by-dynamic-analysis",children:"Discovering Invariants By Dynamic Analysis"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"The above has two paths, but programs have arbitrary paths: loops, cases, recursion etc."}),"\n",(0,s.jsxs)(i.li,{children:["Dynamic analysis:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["runs the program ",(0,s.jsx)(i.em,{children:"n"})," times and discovers information."]}),"\n",(0,s.jsx)(i.li,{children:"discovering information over an arbitrary amount of paths is not feasible with dynamic analysis."}),"\n",(0,s.jsxs)(i.li,{children:["At best can detect likely invariants (",(0,s.jsx)(i.code,{children:"Daikon"}),")."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Daikon"})," can at best concluded ",(0,s.jsx)(i.code,{children:"z = 42"})," is a ",(0,s.jsx)(i.em,{children:"likely"})," invariant. Cannot prove ",(0,s.jsx)(i.code,{children:"z == 42"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:["Not entirely useless. ",(0,s.jsx)(i.code,{children:"z"})," ",(0,s.jsx)(i.em,{children:"might"})," be ",(0,s.jsx)(i.code,{children:"42"})," is a useful fact."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Daikon"})," can rule out classes of invariant with a single run. It can concluded ",(0,s.jsx)(i.code,{children:"z == c"})," is not an invariant for any ",(0,s.jsx)(i.code,{children:"c"})," other than ",(0,s.jsx)(i.code,{children:"42"}),", i.e. ",(0,s.jsx)(i.code,{children:"z==30"})," is not an invariant."]}),"\n",(0,s.jsxs)(i.li,{children:["To prove ",(0,s.jsx)(i.code,{children:"z == 42"}),", need static analysis."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"discovering-invariants-by-static-analysis",children:"Discovering Invariants By Static Analysis"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Inspect the source code of the program."}),"\n",(0,s.jsxs)(i.li,{children:["Concludes ",(0,s.jsx)(i.code,{children:"c = 42"})," and this proves the invariant."]}),"\n"]})]})}function h(n={}){const{wrapper:i}={...(0,a.R)(),...n.components};return i?(0,s.jsx)(i,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,i,e)=>{e.d(i,{R:()=>t,x:()=>o});var s=e(6540);const a={},r=s.createContext(a);function t(n){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function o(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:t(n.components),s.createElement(r.Provider,{value:i},n.children)}}}]);