"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6479],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),l=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=l(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return t?n.createElement(h,o(o({ref:r},u),{},{components:t})):n.createElement(h,o({ref:r},u))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var s in r)hasOwnProperty.call(r,s)&&(c[s]=r[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7588:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=t(7462),a=(t(7294),t(3905));const i={},o="Exercise 1",c={unversionedId:"PyTorch/nvfuser_exercises/exercise_1",id:"PyTorch/nvfuser_exercises/exercise_1",title:"Exercise 1",description:"In this exercise we will:",source:"@site/docs/PyTorch/nvfuser_exercises/exercise_1.md",sourceDirName:"PyTorch/nvfuser_exercises",slug:"/PyTorch/nvfuser_exercises/exercise_1",permalink:"/docs/PyTorch/nvfuser_exercises/exercise_1",editUrl:"https://github.com/syed-ahmed/syed-ahmed.github.io/blob/main/website/docs/PyTorch/nvfuser_exercises/exercise_1.md?plain=1",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Getting code coverage info in PyTorch",permalink:"/docs/PyTorch/code_coverage"}},s={},l=[{value:"Reading TorchScript IR",id:"reading-torchscript-ir",level:2},{value:"Lower to Fusion IR",id:"lower-to-fusion-ir",level:2},{value:"nvFuser Basics",id:"nvfuser-basics",level:2}],u={toc:l};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"exercise-1"},"Exercise 1"),(0,a.kt)("p",null,"In this exercise we will:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Read a TorchScript IR using ",(0,a.kt)("inlineCode",{parentName:"li"},"torch::jit::parseIR"),"."),(0,a.kt)("li",{parentName:"ul"},"Lower TorchScript IR to nvFuser Fusion IR using ",(0,a.kt)("inlineCode",{parentName:"li"},"torch::jit::fuser::cuda::parseJitIR"),"."),(0,a.kt)("li",{parentName:"ul"},"Print the Fusion IR, understand ",(0,a.kt)("inlineCode",{parentName:"li"},"parseJitIR")," and nvFuser basics.")),(0,a.kt)("h1",{id:"solution"},"Solution"),(0,a.kt)("h2",{id:"reading-torchscript-ir"},"Reading TorchScript IR"),(0,a.kt)("p",null,"In these set of exercises, it doesn't really matter why we are using TorchScript as the input.\nWe want to focus on nvFuser Fusion IR and we can get to Fusion IR from TorchScript IR quickly."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create a C++ source file and start adding the\nnecessary headers:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre"},"```cpp\n#include <torch/csrc/jit/ir/ir.h>\n#include <torch/csrc/jit/ir/irparser.h>\n\n#include <iostream>\n```\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Create a graph object:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"auto g = torch::jit::Graph();\n"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Parse a TorchScript IR into the graph object:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'const auto graph_str = R"IR(\n    graph(%0 : Float(8, 256, 56, 56, strides=[802816, 3136, 56, 1], requires_grad=0, device=cuda:0),\n        %1 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %2 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %3 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %4 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %5 : Float(8, 256, 56, 56, strides=[802816, 3136, 56, 1], requires_grad=0, device=cuda:0),\n        %6 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %7 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %8 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %9 : Float(256, strides=[1], requires_grad=0, device=cuda:0),\n        %10 : int):\n    %11 : float = prim::Constant[value=1.0000000000000001e-05]()\n    %12 : float = prim::Constant[value=0.10000000000000001]()\n    %13 : bool = prim::Constant[value=0]()\n    %14 : Float(8, 256, 56, 56, strides=[802816, 3136, 56, 1], requires_grad=0, device=cuda:0), %15 : Tensor, %16 : Tensor = aten::native_batch_norm(%5, %6, %7, %8, %9, %13, %12, %11)\n    %17 : Float(8, 256, 56, 56, strides=[802816, 3136, 56, 1], requires_grad=0, device=cuda:0), %18 : Tensor, %19 : Tensor = aten::native_batch_norm(%0, %1, %2, %3, %4, %13, %12, %11)\n    %20 : Float(8, 256, 56, 56, strides=[802816, 3136, 56, 1], requires_grad=0, device=cuda:0) = aten::add(%17, %14, %10)\n    %21 : Float(8, 256, 56, 56, strides=[802816, 3136, 56, 1], requires_grad=0, device=cuda:0) = aten::relu(%20)\n    return (%21))IR";\ntorch::jit::parseIR(graph_str, &g);\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Print the graph to convince yourself that the parser did its job:"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"std::cout << g << std::endl;\n")))),(0,a.kt)("h2",{id:"lower-to-fusion-ir"},"Lower to Fusion IR"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"First, add the necessary header to use ",(0,a.kt)("inlineCode",{parentName:"li"},"parseJitIR")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"FusionGuard"),":",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <torch/csrc/jit/codegen/cuda/executor.h>\n#include <torch/csrc/jit/codegen/cuda/parser.h>\n"))),(0,a.kt)("li",{parentName:"ul"},"We'll need to make some changes to how we created the graph object. ",(0,a.kt)("inlineCode",{parentName:"li"},"parseJitIR")," expects a ",(0,a.kt)("inlineCode",{parentName:"li"},"shared_ptr")," object. So we'll change our graph creation accordingly:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"auto g = std::make_shared<torch::jit::Graph>();\n"))),(0,a.kt)("li",{parentName:"ul"},"Now we can lower TorchScript IR to Fusion IR and print:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"auto fusion = torch::jit::fuser::cuda::parseJitIR(g);\ntorch::jit::fuser::cuda::FusionGuard fg(fusion.get());\nfusion.get()->print();\n")))),(0,a.kt)("h2",{id:"nvfuser-basics"},"nvFuser Basics"),(0,a.kt)("p",null,"TODO"))}p.isMDXComponent=!0}}]);