"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9917],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>y});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=n,y=m["".concat(l,".").concat(d)]||m[d]||p[d]||i;return a?r.createElement(y,o(o({ref:t},u),{},{components:a})):r.createElement(y,o({ref:t},u))}));function y(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8521:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={},o="What is Program Analysis?",s={unversionedId:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",id:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",title:"What is Program Analysis?",description:"- Process of automatically discovering useful facts about program.",source:"@site/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/3_program_analysis.md",sourceDirName:"LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis",slug:"/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/program_analysis",editUrl:"https://github.com/syed-ahmed/syed-ahmed.github.io/blob/main/website/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/3_program_analysis.md?plain=1",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Course VM and Lab Instructions",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/course_vm_lab"},next:{title:"Discovering Invariants by Dynamic and Static Analysis",permalink:"/docs/LLVM/CIS 547 Software Analysis/Module 1: Introduction to Software Analysis/discover_invariants"}},l={},c=[{value:"Dynamic Program Analysis",id:"dynamic-program-analysis",level:2},{value:"Static Analysis",id:"static-analysis",level:2}],u={toc:c},m="wrapper";function p(e){let{components:t,...a}=e;return(0,n.kt)(m,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"what-is-program-analysis"},"What is Program Analysis?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Process of ",(0,n.kt)("strong",{parentName:"li"},"automatically")," discovering useful facts about program."),(0,n.kt)("li",{parentName:"ul"},"Example useful fact: programming error, security vulnerabilities, overflow etc."),(0,n.kt)("li",{parentName:"ul"},"Analysis classified broadly into 3 kinds:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Dynamic: runtime analysis, runs the program, observes its behavior."),(0,n.kt)("li",{parentName:"ul"},"Static: compile-time analysis, inspects source/binary code."),(0,n.kt)("li",{parentName:"ul"},"Hybrid: combines both dynamic and static, use runtime and compile-time in interesting ways.")))),(0,n.kt)("h2",{id:"dynamic-program-analysis"},"Dynamic Program Analysis"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Monitors program runs and collects facts of the program."),(0,n.kt)("li",{parentName:"ul"},"Examples:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Purify"),": checks memory accesses, array bounds in C/C++."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Valgrind"),": detects memory leaks in x86 binaries. ",(0,n.kt)("strong",{parentName:"li"},"Memory leak")," is when program fails to ",(0,n.kt)("inlineCode",{parentName:"li"},"free")," allocated memories."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Eraser"),": detects data races in concurrent programs. ",(0,n.kt)("strong",{parentName:"li"},"Data race")," happens when two threads access the same memory location and at least one thread is doing a write. Data race indicates programming error as order of accesses can produce different results between runs."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Daikon"),": finds likely invariants. ",(0,n.kt)("strong",{parentName:"li"},"Invariants")," are program facts that is true in every run of the program.")))),(0,n.kt)("h2",{id:"static-analysis"},"Static Analysis"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Inspects source/binary code and collects facts of the program"),(0,n.kt)("li",{parentName:"ul"},"Examples:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Lint"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"FindBugs"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"Coverity"),": inspects C++/Java for suspicious error patterns."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Microsoft SLAM"),": checks C programs conforms to API usage rules. Windows developers use this to check whether device drivers use windows kernel API correctly."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Facebook Infer"),": detects memory leaks in Android apps."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"ESC/Java"),": specifies and verifies invariants in java programs.")))))}p.isMDXComponent=!0}}]);